= Installing the Cycle Nearby Application

The Cycle Nearby application has been tested with Ruby 1.9.2 and
Linux.  Ruby 1.9.1 is known not to work.  Other versions of Ruby and
other operating systems have not been tested.

To run the application, you will need to install the following packages:
* Git
* Ruby 1.9.2
* Rake
* SQLite3
* libspatialite
* spatialite-tools
* unzip

You will need to locate the libspatilite shared library:
libspatialite.so on Linux, libspatialite.dll on Windows.  Edit the
following files and replace '/usr/lib64/libspatialite.so' with the
correct path and shared library name.

./update_apd_incidents.rb:dbh.handle.load_extension('/usr/lib64/libspatialite.so')
./lib/findit/feature/rake-defs.rb:      DB.handle.load_extension('/usr/lib64/libspatialite.so')
./lib/findit/app.rb:        @db.handle.load_extension('/usr/lib64/libspatialite.so')

Download the source into ./CycleNearby with:

  $ git clone -b SQLite3 https://github.com/AustinBlues/findit CycleNearby
  $ cd CycleNearby

You also need the Bundler Ruby Gem.  To install the other needed Ruby
Gems, run the command:

  $ bundle install

Once you have the above requirements complete, create and populate the
database with the following commands ('$' is the prompt, don't type it):

  $ spatialite cycle_nearby.db < cycle_nearby.sql
  $ cd lib/findit/feature/austin.ci.tx.us/data/historical
  $ rake -f Rakefile load
  $ cd ../facilities
  $ rake -f Rakefile load
  $ cd ../../../../../..
  $ ruby update_apd_incidents.rb

Now you are ready to run the application:

  $ rackup -p 4567
  >> Thin web server (v1.4.1 codename Chromeo)
  >> Maximum connections set to 1024
  >> Listening on 0.0.0.0:4567, CTRL+C to stop

Finally, if you browse to http://localhost:4567 the application should launch. It should
first try to locate your current position, and then it should draw a map showing your
position and surrounding features.

== Production Deployment (TDB)

For production use, I serve the Cycle Nearby application with the Apache HTTP
web server using Phusion Passenger (http://www.modrails.com/).

Here is the procedure to do that:

* Install the <i>passenger</i> Ruby gem (and its dependencies).

* Then run the "passenger-install-apache2-module" script that is distributed
  with the gem.
  
* Configure Apache for Passenger. Here is the server configuration I use:

    LoadModule passenger_module /var/lib/gems/1.9.1/gems/passenger-3.0.11/ext/apache2/mod_passenger.so
    PassengerRoot /var/lib/gems/1.9.1/gems/passenger-3.0.11
    PassengerRuby /usr/bin/ruby1.9.1
    
    # Passenger will be enabled in the .htaccess file of the application.
    PassengerEnabled off

* Finally, setup a virtual web server with <i>DocumentRoot</i> set to the "findit/public"
  directory.

Chip Rosenthal
chip@unicom.com
12 July 2012

